//Task1
package org.example;

import java.util.Scanner;

public class JavaPart2 {
    public static boolean areStringsEqual(String str1, String str2, boolean caseSensitive) {
        if (caseSensitive) {
            return str1.equals(str2);
        } else {
            return str1.equalsIgnoreCase(str2);
        }
    }

    public static String getSubstringBetweenIndices(String str, int startIndex, int endIndex) {
        return str.substring(startIndex, endIndex + 1);
    }

    public static boolean containDigits(String text) {
        for (int i = 0; i < text.length(); i++) {
            if (Character.isDigit(text.charAt(i))) {
                return true;
            }
        }
        return false;
    }
    public static String removeAllLeadingAndTrailingSpaces(String text){
        String withoutspaces = text.trim();
        return withoutspaces;

    }
    public static String[]  splitString( String text, String delimiter){
        String[] splitText = text.split(delimiter);
        return splitText;

    }

    public static void main(String[] args) {
        System.out.println("Demonstrate Task 1");
        String s1 = "Test";
        String s2 = "test";
        System.out.println(areStringsEqual(s1, s2, true));
        System.out.println(areStringsEqual(s1, s2, false));

        System.out.println("Demonstrate Task 2");
        String originalString = "Test program";
        int startIndex = 2;
        int endIndex = 5;
        System.out.println(getSubstringBetweenIndices(originalString, startIndex, endIndex));

        System.out.println("Demonstrate Task 5");
        String s5 = "Test2123hgfd";
        boolean hasDigit = containDigits(s5);
        System.out.println("Text (" + s5 + ") has degits? " + hasDigit);

        System.out.println("Demonstrate Task 6");
        String test_text = " Text should be without spaces                  ";
        String s6 = removeAllLeadingAndTrailingSpaces (test_text);
        System.out.println("This text doesn't have leading and trailing spaces:" + s6 + ".");

        System.out.println( "Demonstrate Task 7");
        String text= "Creating,reports,on,the,defects,found ";
        String delimiter = ",";
        String[] result= splitString(text, delimiter);
        System.out.println("Print the result");
        for (String substring : result) {
            System.out.println(substring);}
  }
}
//Task 2
package org.example;

import java.lang.Math;

public class Rectangle {
    private double width;
    private double height;
    private final double angle = 90.0;
    public Rectangle() {
        this.width = 0.0;
        this.height = 0.0;
    }

    public Rectangle(double width, double height) {
        this.width = width;
        this.height = height;
    }

    public double getWidth() {
        return width;
    }

    public void setWidth(double width) {
        this.width = width;
    }

    public double getHeight() {
        return height;
    }

    public void setHeight(double height) {
        this.height = height;
    }

    public double getAngle() {
        return angle;
    }

    public double calculateArea() {
        return width * height;
    }

    public double calculatePerimeter() {
        return 2 * (width + height);
    }

    public double getDiagonal() {
        return Math.sqrt(width * width + height * height);
    }
    public static void main(String[] args) {
        
        Rectangle defaultRectangle = new Rectangle();
        System.out.println("Default Rectangle - Width: " + defaultRectangle.getWidth() +
                ", Height: " + defaultRectangle.getHeight() +
                ", Angle: " + defaultRectangle.getAngle());


        Rectangle testRectangle = new Rectangle(5.0, 7.0);
        System.out.println("Test Rectangle - Width: " + testRectangle.getWidth() +
                ", Height: " + testRectangle.getHeight() +
                ", Angle: " + testRectangle.getAngle());

        System.out.println("Area: " + testRectangle.calculateArea());
        System.out.println("Perimeter: " + testRectangle.calculatePerimeter());
        System.out.println("Diagonal: " + testRectangle.getDiagonal());
    }
}
//Task 3 Analysis of a Collection of Numbers
package org.example;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Random;

public class Java2Task3 {
    public static void main(String[] args) {
        ArrayList<Integer> numbers = new ArrayList<>();
        Random random = new Random();
        for (int i = 0; i < 20; i++) {
            numbers.add(random.nextInt(100) + 1);
        }

        System.out.println("Show all elements:");
        System.out.println(numbers);

        int min = Collections.min(numbers);
        int max = Collections.max(numbers);
        System.out.println("\nMinimum: " + min + ", Maximum: " + max);

        double sum = 0;
        for (Integer number : numbers) {
            sum += number;
        }
        double average = sum / numbers.size();
        System.out.println("\nAverage2: " + average);

        numbers.removeIf(n -> n % 2 == 0);
        System.out.println("\nWithout even numbers:");
        System.out.println(numbers);

        int targetNumber = 50;
        boolean containsNumber = numbers.contains(targetNumber);
        System.out.println("\nThere is " + targetNumber + "? " + containsNumber);

        Collections.sort(numbers);
        System.out.println("\nSorted array:");
        System.out.println(numbers);
    }
}
// Task 4. Operations with a Book Collection.
package org.example;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;

public class Book {
    private String title;
    private String author;
    private String genre;
    private int year;

    public Book(String title, String author, String genre, int year) {
        this.title = title;
        this.author = author;
        this.genre = genre;
        this.year = year;
    }

    public String getTitle() {
        return title;
    }

    public void setTitle(String title) {
        this.title = title;
    }

    public String getAuthor() {
        return author;
    }

    public void setAuthor(String author) {
        this.author = author;
    }

    public String getGenre() {
        return genre;
    }

    public void setGenre(String genre) {
        this.genre = genre;
    }

    public int getYear() {
        return year;
    }

    public void setYear(int year) {
        this.year = year;
    }
}

public class BookCollection {
    public List<Book> books;

    public BookCollection() {
        this.books = new ArrayList<>();
    }

    public void printListOfAuthors() {
        for (Book book : books) {
            System.out.println(book.getAuthor());
        }
    }

    public void listAuthorsByGenre(String genre) {
        for (Book book : books) {
            if (book.getGenre().equalsIgnoreCase(genre)) {
                System.out.println(book.getAuthor());
            }
        }
    }

    public void listAuthorsByPublicationYear(int year) {
        for (Book book : books) {
            if (book.getYear() == year) {
                System.out.println(book.getAuthor());
            }
        }
    }

    public Book findBookByAuthor(String author) {
        for (Book book : books) {
            if (book.getAuthor().equalsIgnoreCase(author)) {
                return book;
            }
        }
        return null;
    }

    public List<Book> findBooksByPublicationYear(int year) {
        List<Book> result = new ArrayList<>();
        for (Book book : books) {
            if (book.getYear() == year) {
                result.add(book);
            }
        }
        return result;
    }

    public List<Book> findBooksByGenre(String genre) {
        List<Book> result = new ArrayList<>();
        for (Book book : books) {
            if (book.getGenre().equalsIgnoreCase(genre)) {
                result.add(book);
            }
        }
        return result;
    }

    public void removeBooksByAuthor(String author) {
        books.removeIf(book -> book.getAuthor().equalsIgnoreCase(author));
    }

    public void sortCollection(Comparator<Book> comparator) {
        Collections.sort(books, comparator);
    }

    public void mergeBookCollections(BookCollection otherCollection) {
        this.books.addAll(otherCollection.books);
    }

    public List<Book> subcollectionOfBooksByGenre(String genre) {
        List<Book> result = new ArrayList<>();
        for (Book book : books) {
            if (book.getGenre().equalsIgnoreCase(genre)) {
                result.add(book);
            }
        }
        return result;
    }
}

public class Java2Task4 {
    public static void main(String[] args) {
        BookCollection collection = new BookCollection();
        collection.books.add(new Book("Book1", "Author1", "Genre1", 2000));
        collection.books.add(new Book("Book2", "Author2", "Genre2", 2005));
        collection.books.add(new Book("Book3", "Author1", "Genre3", 2010));

        System.out.println("List of Authors:");
        collection.printListOfAuthors();

        System.out.println("\nList of Authors in Genre2:");
        collection.listAuthorsByGenre("Genre2");

        System.out.println("\nList of Authors in 2010:");
        collection.listAuthorsByPublicationYear(2010);

        System.out.println("\nFind Book by Author 'Author2':");
        Book bookByAuthor = collection.findBookByAuthor("Author2");
        if (bookByAuthor != null) {
            System.out.println("Found: " + bookByAuthor.getTitle());
        } else {
            System.out.println("Book not found.");
        }

        System.out.println("\nFind Books in 2005:");
        List<Book> booksIn2005 = collection.findBooksByPublicationYear(2005);
        for (Book book : booksIn2005) {
            System.out.println(book.getTitle());
        }

        System.out.println("\nFind Books in Genre 'Genre3':");
        List<Book> booksInGenre3 = collection.findBooksByGenre("Genre3");
        for (Book book : booksInGenre3) {
            System.out.println(book.getTitle());
        }

        System.out.println("\nRemove Books by Author 'Author1':");
        collection.removeBooksByAuthor("Author1");
        collection.printListOfAuthors();

        System.out.println("\nMerge Book Collections:");
        BookCollection otherCollection = new BookCollection();
        otherCollection.books.add(new Book("Book4", "Author3", "Genre4", 2015));
        otherCollection.books.add(new Book("ABook5", "Author4", "Genre2", 2020));
        collection.mergeBookCollections(otherCollection);
        collection.printListOfAuthors();

        System.out.println("\nSort Collection by Title:");
        collection.sortCollection(Comparator.comparing(Book::getTitle));
        collection.printListOfAuthors();

        System.out.println("\nSubcollection of Books in Genre 'Genre2':");
        List<Book> subcollection = collection.subcollectionOfBooksByGenre("Genre2");
        for (Book book : subcollection) {
            System.out.println(book.getTitle());
        }
    }
}
